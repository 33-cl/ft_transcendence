server {
    listen 80;
    server_name localhost;
    return 301 https://$host:3000$request_uri;
}

server {
    listen 8080;
    server_name localhost;
    return 301 https://$host:3000$request_uri;
}

server {
    listen 8081;
    server_name localhost;
    return 301 https://$host:3000$request_uri;
}

server {
    listen 3000 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    root /app;
    index index.html;

    # Proxy API REST
    location /rooms {
        proxy_pass https://backend:8080/rooms;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /users {
        proxy_pass https://backend:8080/users;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    # Proxy WebSocket (socket.io)
    location /socket.io/ {
        proxy_pass https://backend:8080/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    # Fallback: fichiers statiques
    location / {
        try_files $uri $uri/ =404;
    }
}
