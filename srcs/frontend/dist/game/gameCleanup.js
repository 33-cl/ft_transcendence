// Syst√®me de nettoyage pour √©viter les conflits entre les sessions de jeu
// Ce module permet de nettoyer proprement l'√©tat du jeu lors de la navigation
let cleanupState = {
    canvas: null,
    ctx: null,
    eventListenersAdded: false,
    gameStateInitialized: false,
    sessionId: 'none',
    cleanupCount: 0
};
// G√©n√®re un ID unique pour chaque session
function generateSessionId() {
    return 'session-' + Math.random().toString(36).substr(2, 9) + '-' + Date.now();
}
// Nettoie compl√®tement l'√©tat du jeu
export function cleanupGameState() {
    const sessionId = generateSessionId();
    cleanupState.cleanupCount++;
    // OPTIMISATION: V√©rifier rapidement s'il y a vraiment quelque chose √† nettoyer
    const hasGameState = window.controlledPaddle ||
        window.isLocalGame ||
        cleanupState.gameStateInitialized ||
        cleanupState.canvas;
    if (!hasGameState) {
        // Rien √† nettoyer, sortir rapidement
        return;
    }
    // 1. Reset des variables globales du jeu
    window.controlledPaddle = null;
    window.isLocalGame = false;
    window.maxPlayers = 2;
    // 2. Nettoyage du canvas et du contexte de rendu
    if (cleanupState.canvas) {
        const ctx = cleanupState.canvas.getContext('2d');
        if (ctx) {
            ctx.clearRect(0, 0, cleanupState.canvas.width, cleanupState.canvas.height);
        }
    }
    // Reset des r√©f√©rences canvas dans le renderer
    resetPongRenderer();
    // 3. Nettoyage des event listeners de contr√¥le
    cleanupPongControls();
    // 4. Nettoyage des event listeners WebSocket
    if (window.cleanupGameEventListeners) {
        window.cleanupGameEventListeners();
    }
    // 5. NOUVEAU : Forcer la sortie de la room c√¥t√© serveur pour √©viter les rooms fant√¥mes
    forceLeaveCurrentRoom();
    // 6. Reset des flags d'√©tat
    cleanupState.eventListenersAdded = false;
    cleanupState.gameStateInitialized = false;
    cleanupState.canvas = null;
    cleanupState.ctx = null;
    cleanupState.sessionId = sessionId;
    // 7. Reset des listeners WebSocket partiels
    window._pongControlsRoomJoinedListener = false;
    window._roomJoinedHandlerSet = false;
    window._navigationListenerSet = false; // Reset du flag de navigation
    // CLEANUP TERMIN√â - √âtat remis √† z√©ro pour la prochaine session
}
// Force la sortie de la room actuelle pour √©viter les conflits
function forceLeaveCurrentRoom() {
    // console.log('üßπ CLEANUP: Starting room cleanup process');
    if (window.socket && window.socket.connected) {
        // console.log('üì§ CLEANUP: Emitting leaveAllRooms event');
        window.socket.emit('leaveAllRooms');
    }
    else {
        // console.log('üîå CLEANUP: No socket connection available');
    }
}
// Force la r√©initialisation du renderer Pong
function resetPongRenderer() {
    // Cette fonction sera appel√©e par le renderer pour se reset
    if (window.resetPongRenderer) {
        window.resetPongRenderer();
    }
}
// Force la r√©initialisation des contr√¥les Pong
function cleanupPongControls() {
    // Cette fonction sera appel√©e par les contr√¥les pour se reset
    if (window.cleanupPongControls) {
        window.cleanupPongControls();
    }
}
// Met √† jour l'√©tat de nettoyage lors de l'initialisation du jeu
export function setGameInitialized() {
    cleanupState.gameStateInitialized = true;
}
// V√©rifie si le jeu a √©t√© correctement nettoy√©
export function isGameClean() {
    return !cleanupState.gameStateInitialized &&
        !cleanupState.eventListenersAdded &&
        cleanupState.canvas === null;
}
//# sourceMappingURL=gameCleanup.js.map