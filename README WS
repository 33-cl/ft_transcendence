# Guide rapide – ft_transcendence WebSocket

# 0. Installer les dépendances

cd frontend && npm install
cd ../backend && npm install

## 1. Structure du projet

- Dist -> contient les fichiers .js generes a partir des fichiers TypeScript (.ts)

## 2. Schema du fonctionnement WebSocket

```
[ Navigateur (frontend) ]
          <->  (WebSocket)
[ Serveur Node.js (backend) ]
```

Le WebSocket permet une communication bidirectionnelle :  
Le navigateur peut envoyer des messages au serveur, et le serveur peut repondre ou envoyer des messages a tout moment au navigateur, sans recharger la page.

---

## 3. Installation & Compilation

!!!! change le chemin mdr
```sh
cd /home/qordoux/Documents/ft_transcendence/frontend && npx tsc
# Compile les fichiers TypeScript (.ts) du frontend en JavaScript.

cd /home/qordoux/Documents/ft_transcendence/backend && npx tsc && node dist/server.js
# Compile puis lance le serveur Node.js (backend).
```

---

## 4. Lancer le frontend

- Installer l'extension Live Server sur VS Code.
- Ouvrir le fichier index.html -> clic droit -> Open with Live Server.

---

## 5. Tester le WebSocket

Dans la console du navigateur (F12) :

```js
sendPing(); // Reponse du serveur attendue
sendMessage('move', { y: 120 }); // Message valide
sendMessage('move', { y: "abc" }); // Message invalide, ignore cote serveur
```

---

## 6. Tester les rooms

- Possible d'ouvrir 2 clients : ils seront par defaut dans la meme room et recevront les infos des autres.
- Pour tester la creation de rooms : (dans la console du nav, ouvrir 2 nav ou + pour tester la com entre clients d'une room)

```js
socket.emit('joinRoom', { maxPlayers: 4 }); // Ou 2 pour tester les rooms a 2 joueurs
sendMessage('score', { left: 1, right: 2 });
```

---

## 7. Fonctionnement des rooms

- Quand on se connecte, on rejoint une room automatiquement.
- Tous les users dans la meme room recoivent les updates des autres joueurs.
- Si un client refait plusieurs fois joinRoom, il quitte l'ancienne room avant de rejoindre la nouvelle (un seul room a la fois).

---

## 8. Problemes frequents

- Erreur "Cannot find module dist/server.js"
  -> Compile d'abord avec npx tsc dans le backend.

- Pas de reponse WebSocket
  -> Verifie que le backend est bien lance et que le frontend est ouvert avec Live Server.


[Frontend]
    |
    |  socket.send(JSON.stringify({ type, data }))
    v
[Backend]
    |
    |  socket.emit('message', objet)   ou   socket.send(JSON.stringify(objet))
    v
[Frontend]

Tu envoies TOUJOURS du JSON (texte) sur le réseau.
JSON.stringify pour envoyer
JSON.parse pour recevoir (si besoin)

---

## 9. Fonctionnement détaillé des sockets et rooms

- Chaque client qui se connecte au backend via WebSocket reçoit un **socket** unique (identifiant `socket.id`).
- Les **rooms** sont des groupes logiques : elles n'ont pas de socket propre, ce sont juste des noms auxquels on peut associer plusieurs sockets (clients).
- Un client peut demander à rejoindre une room (événement `joinRoom`).
    - Avant de rejoindre une nouvelle room, le serveur retire le client de son ancienne room (s'il en avait une).
    - Le serveur cherche une room existante avec la capacité demandée, ou en crée une nouvelle.
    - Le client rejoint la room trouvée/créée.
    - Le serveur informe le client de la room rejointe (`roomJoined`).
- À tout moment, tu peux envoyer un message à tous les membres d'une room avec :

```ts
io.to('roomName').emit('event', data);
```

- Quand un client se déconnecte, il est retiré de sa room.
- Résumé : **le socket appartient au client, la room est juste un regroupement logique de sockets côté serveur.**
