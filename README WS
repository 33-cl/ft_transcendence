# ft_transcendence – WebSocket & API Rooms

## 1. Principe général

- Le backend expose une **API REST** pour créer/lister/supprimer des rooms (voir `/rooms`).
- Les rooms sont des groupes logiques : chaque room a un nom, une capacité (`maxPlayers`), et une liste de sockets (joueurs).
- Le frontend utilise cette API pour créer ou rejoindre dynamiquement des rooms de n'importe quelle taille (1v1, 2v2, etc.).
- La logique anti-zap empêche de zapper entre rooms non pleines du même type (voir plus bas).

---

## 2. API REST – Gestion des rooms

- **Créer une room**
    ```http
    POST /rooms
    Body: { "maxPlayers": 2 } // ou 4, etc.
    → Retour: { roomName, maxPlayers }
    ```
- **Lister toutes les rooms**
    ```http
    GET /rooms
    → Retour: { rooms: { [roomName]: { players, maxPlayers } } }
    ```
- **Supprimer une room**
    ```http
    DELETE /rooms/:roomName
    → Retour: { success: true }
    ```

---

## 3. Fonctionnement du join côté frontend

- Utilise la fonction générique :
    ```js
    joinOrCreateRoom(maxPlayers); // 2 pour 1v1, 4 pour 2v2, etc.
    ```
- Cette fonction :
    1. Cherche une room existante non pleine du bon type via l'API.
    2. Si aucune, crée une room via l'API REST.
    3. Demande au backend WebSocket de rejoindre la room trouvée/créée.
    4. Affiche la room rejointe dans la console.
- **Anti-zap** : tu ne peux pas zapper entre rooms non pleines du même type (ex : 1v1 → 1v1), mais tu peux zapper entre types différents (1v1 ↔ 2v2).

---

## 4. Tester le fonctionnement des rooms

- Ouvre plusieurs navigateurs ou onglets.
- Dans la console navigateur :
    ```js
    joinOrCreateRoom(2); // pour tester le 1v1
    joinOrCreateRoom(4); // pour tester le 2v2
    ```
- Vérifie dans la console que la room rejointe correspond à la taille demandée.
- Utilise l'API REST (`GET /rooms`) pour voir l'état des rooms en temps réel (ex : via Postman, curl, ou navigateur).
- Pour tester l'échange de messages dans une room :
    ```js
    sendMessage('move', { y: 120 });
    sendMessage('score', { left: 1, right: 2 });
    ```

---

## 5. Résumé technique

- Les rooms sont créées et gérées côté backend via l'API REST.
- Le frontend ne fait que demander à rejoindre/créer une room de la taille voulue.
- La sécurité anti-zap est gérée côté backend.
- Un seul room à la fois par client.

---

**Pour toute question ou bug, ping qordoux.**
